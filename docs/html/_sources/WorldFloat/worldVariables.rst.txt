World Variables
+++++++++++++++

These components allow you to create data that can be easily referenced. This data is also
automatically saved and restored during runtime to preserve important information. The four types of variables
used are Float, String, and Vector3. The **Health** component is also part of this group, 
but it works as a Float underneath the hood.

Each of these variables can be linked to a corresponding scriptable object. For example, if using the
Health component, the **WorldFloatSO** (scriptable object) that belongs to it can be used as a reference for UI elements 
to display the character's health. Any other system, like an enemy AI, can also read this value to change its behavior.
Thus, this will help decouple your systems because information is exchanged between gameobjects without 
creating hard references.


Float And Health
================

.. tip::
 Float can be treated as a boolean by setting its value to either 1 or 0 (True or False).

.. list-table::
   :widths: 25 100
   :header-rows: 1

   * - Property
     - 

   * - Name ID
     - The name of the variable. If using the save system, this name must be unique. Click the generate button to create a unique name ID if necessary.
 
   * - Value
     - The current float value of the variable. This is the value that will be saved.
 
   * - Clamp
     - Clamp this value.

   * - Recovery Time
     - If this is Health, the amount of time after being damaged where the character doesn't take any damage.

   * - Save
     - If enabled, the system will save and restore this value.

   * - Is Scriptable Object
     - If enabled, a button will appear to create a scriptable object (**WorldFloatSO**). If created, it will be found in the Resources/Variables folder. If the scriptable
       object is no longer required, delete it manually.

.. list-table::
   :widths: 25 100
   :header-rows: 1

   * - Events
     - 

   * - On Min Value
     - The event invoked when the value reaches the minimum value. Typically this is called when the value is zero, like the character's health.
 
   * - On Max Value
     - The event invoked when the value reaches the maximum value.
 
   * - On Value Changed
     - The event invoked when the value has been changed. This is invoked with the change in value and the direction of damage, if using Health.

   * - On Load Condition True
     - If Save is enabled, the event invoked if the value is greater than zero (True) on Start after it's restored. Maybe a door needs to stay open once it's been unlocked.

   * - On Load Condition False
     - If Save is enabled, the event invoked if the value is zero (False) on Start after it's restored.

.. list-table::
   :widths: 25 100
   :header-rows: 1

   * - Method
     - 

   * - GetValue()
     - Returns the current value.

   * - Save()
     - Save the current value.

   * - SetValueAndSave(float value)
     - Set the current value and save it.

   * - Increment(float value)
     - Increment the current value.
 
   * - SetValue(float value)
     - Set the current value.

   * - CanIncrement(bool value)
     - If false, the current value can't be incremented.

   * - SetTrue()
     - Give the current value a value of 1f.

   * - SetFalse()
     - Give the current value a value of 0f.

   * - CantTakeDamage(bool value)
     - If this is health, the layer on this gameobject will be switched to the ignore raycast layer if True. Will revert on False.


String And Vector3
==================

These work in a similar fashion as Float.

.. list-table::
   :widths: 25 100
   :header-rows: 1

   * - Events
     - 

   * - AfterLoad
     - If Save is enabled, the event invoked on Start after it's restored. 


.. list-table::
   :widths: 25 100
   :header-rows: 1

   * - Method
     - 

   * - GetValue()
     - Returns the current value.

   * - Save()
     - Save the current value.

   * - SetValueAndSave(type value)
     - Set the current value and save it.
 
   * - SetValue(type value)
     - Set the current value.
